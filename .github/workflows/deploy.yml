name: Deploy Laravel App to CloudPanel

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout latest code on GitHub runner
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Deploy via SSH
      - name: Deploy Laravel App via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          timeout: 180s
          script: |
            set -e
            echo "=== Starting Laravel Deployment ==="

            cd /home/gburi-arabmed/htdocs/arabmed.gburi.dev/

            # Backup current deployment (keep last 3)
            if [ -d "laravel-app" ]; then
              echo "=== Creating backup ==="
              cp -r laravel-app laravel-app-backup-$(date +%Y%m%d_%H%M%S)
              ls -dt laravel-app-backup-* | tail -n +4 | xargs rm -rf || true
            fi

            # Pull latest changes from Git
            if [ -d "laravel-app/.git" ]; then
              echo "=== Pulling latest changes ==="
              cd laravel-app
              git fetch origin main
              git reset --hard origin/main
              cd ..
            else
              echo "❌ Git repository not found in laravel-app folder!"
              exit 1
            fi

            # Install/update dependencies
            cd laravel-app
            composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

            # Update .env
            if [ ! -f ".env" ]; then
              cp .env.example .env
            fi
            sed -i "s|APP_ENV=local|APP_ENV=production|" .env
            sed -i "s|APP_DEBUG=true|APP_DEBUG=false|" .env
            sed -i "s|APP_URL=.*|APP_URL=${{ secrets.APP_URL }}|" .env
            sed -i "s|DB_DATABASE=.*|DB_DATABASE=${{ secrets.DB_DATABASE }}|" .env
            sed -i "s|DB_USERNAME=.*|DB_USERNAME=${{ secrets.DB_USERNAME }}|" .env
            sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${{ secrets.DB_PASSWORD }}|" .env
            php artisan key:generate --force

            # Clear and cache Laravel
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
            php artisan route:clear
            php artisan event:clear

            # Run database migrations
            php artisan migrate --force

            # Create storage symlink if not exists
            if [ ! -L "public/storage" ]; then
              php artisan storage:link
            fi

            # Optimize Laravel
            php artisan config:cache
            php artisan view:cache
            php artisan route:cache
            php artisan event:cache

            # Update public web root
            cd ..
            rsync -av --delete laravel-app/public/ public/
            sed -i "s|__DIR__.'/../vendor/autoload.php'|__DIR__.'/../laravel-app/vendor/autoload.php'|g" public/index.php
            sed -i "s|__DIR__.'/../bootstrap/app.php'|__DIR__.'/../laravel-app/bootstrap/app.php'|g" public/index.php

            echo "=== Deployment Completed ==="
            cd laravel-app
            echo "Latest commit: $(git log --oneline -1)"
            echo "Laravel version: $(php artisan --version)"
            echo "Environment: $(php artisan env)"

      # 3️⃣ Verify deployment
      - name: Verify deployment
        run: |
          echo "Waiting 20 seconds for deployment..."
          sleep 20
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.APP_URL }} || echo "CURL_FAILED")
          if [ "$HTTP_STATUS" = "200" ]; then
            echo "✅ Laravel site is responding correctly (HTTP $HTTP_STATUS)"
          else
            echo "⚠️ Site returned HTTP $HTTP_STATUS or failed to connect"
            RESPONSE=$(curl -s ${{ secrets.APP_URL }} | head -200)
            if echo "$RESPONSE" | grep -q "500"; then
              echo "❌ Detected 500 error - check Laravel logs"
            elif echo "$RESPONSE" | grep -q "404"; then
              echo "❌ Detected 404 error - check routing configuration"
            elif echo "$RESPONSE" | grep -q "403"; then
              echo "❌ Detected 403 error - check permissions"
            fi
          fi

      # 4️⃣ Notify on failure
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Check workflow logs."
